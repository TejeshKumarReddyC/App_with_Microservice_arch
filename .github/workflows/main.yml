name: Deploy to Amazon ECS via OIDC

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO_FRONTEND: frontend
  ECR_REPO_BACKEND: backend
  ECS_CLUSTER: my-ecs-cluster
  ECS_SERVICE_FRONTEND: frontend-service
  ECS_SERVICE_BACKEND: backend-service

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::202583917032:role/githubconn
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker images
        run: |
          docker build -t $ECR_REPO_FRONTEND ./frontend
          docker build -t $ECR_REPO_BACKEND ./backend

      - name: Tag and push Docker images to ECR
        run: |
          FRONTEND_IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_FRONTEND:latest
          BACKEND_IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_BACKEND:latest

          docker tag $ECR_REPO_FRONTEND $FRONTEND_IMAGE_URI
          docker tag $ECR_REPO_BACKEND $BACKEND_IMAGE_URI

          docker push $FRONTEND_IMAGE_URI
          docker push $BACKEND_IMAGE_URI

      - name: Deploy Frontend to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_FRONTEND \
            --force-new-deployment

      - name: Deploy Backend to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --force-new-deployment
